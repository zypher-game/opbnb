name: Build Unified Image (Alternative)

on:
  workflow_dispatch:
    inputs:
      customImageTag:
        description: 'Custom Docker Image Tag (keep empty for git hash)'
        required: false
        default: ''
      pushToRegistry:
        description: 'Push to registry'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-unified:
    name: Build Unified Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event.inputs.pushToRegistry == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Image Tag
        id: image-tag
        run: |
          if [ "${{ github.event.inputs.customImageTag }}" != "" ]; then
            echo "tag=${{ github.event.inputs.customImageTag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/zypher-game/opbnb
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=raw,value=${{ steps.image-tag.outputs.tag }}

      - name: Build and push unified image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event.inputs.pushToRegistry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.image-tag.outputs.tag }}

      - name: Image built successfully
        run: |
          echo "Unified image built successfully!"
          echo "Image contains: op-node, op-batcher, op-proposer"
          echo "Tags: ${{ steps.meta.outputs.tags }}" 